name: Publish to Test PyPI

on:
  push:
    branches:
      - 'test/**'

jobs:
  testpypi:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11']
        exclude:
          - os: windows-latest
            python-version: '3.9'
        include:
          - os: ubuntu-latest
            cc: gcc
            cxx: g++
            label: linux-64
          - os: macos-latest
            cc: clang
            cxx: clang++
            label: osx-64
          - os: windows-latest
            cc: cl
            cxx: cl
            label: win-64

    name: ${{ matrix.label }}-Python-${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash -l {0}

    steps:
    - uses: actions/checkout@v4

    - name: Setup Conda Environment with Miniconda
      uses: conda-incubator/setup-miniconda@v2
      with:
        miniconda-version: latest
        python-version: ${{ matrix.python-version }}
        activate-environment: noiseflow

    - name: Set Conda Cache Date
      run: echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

    - name: Cache Conda Env
      id: cached-conda-dependencies
      uses: actions/cache@v3
      env:
        CACHE_NUMBER: 0 # Increase this value to reset cache if etc/example-environment.yml has not changed
      with:
        path: ${{ env.CONDA }}/envs
        key: conda-${{ runner.os }}-python${{ matrix.python-version }}-${{ env.DATE }}-${{ hashFiles('**/environment.yml') }}-${{ env.CACHE_NUMBER }}

    - name: Install Conda Dependencies
      if: steps.cached-conda-dependencies.outputs.cache-hit != 'true'
      run: |
        if [[ "${{ matrix.os }}" != "windows-latest" ]]; then
          conda env update -n noiseflow -f environment.yml
        fi

    - name: Setup Poetry in Conda Environment
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Cache Poetry Env
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: poetry-${{ runner.os }}-python${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install Poetry Dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install Source-Code from Github
      run: |
        if [[ "${{ matrix.os }}" != "windows-latest" ]]; then
          git clone https://github.com/xtensor-stack/xtensor-fftw extern/xtensor-fftw
          git clone https://github.com/kfrlib/kfr extern/kfr
        fi

    - name: Build and Publish
      run: |
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          if [[ "${{ matrix.python-version }}" == "3.11" ]]; then
            LLVM_OPENMP=1 CXX=${{ matrix.cxx }} NOISEFLOW_USE_CPP=1 poetry build
          else
            LLVM_OPENMP=1 CXX=${{ matrix.cxx }} NOISEFLOW_USE_CPP=1 poetry build -f wheel
          fi
        elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          CXX=${{ matrix.cxx }} NOISEFLOW_USE_CPP=1 poetry build -f wheel
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          poetry build -f wheel
        fi
        poetry config repositories.test-pypi https://test.pypi.org/legacy/
        poetry publish --repository test-pypi --username __token__ --password ${{ secrets.TEST_PYPI_TOKEN_NOISEFLOW }}
